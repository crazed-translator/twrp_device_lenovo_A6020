import init.target.recovery.rc

on firmware_mounts_complete
    rm /dev/.booting

on fs
    # Make bootdevice symlink
    wait /dev/block/platform/soc.0/${ro.boot.bootdevice}
    symlink /dev/block/platform/soc.0/${ro.boot.bootdevice} /dev/block/bootdevice

on init

on init
    mkdir /vendor/firmware
    mkdir /vendor/firmware/keymaster
    symlink /firmware/image/keymaster.b00 /vendor/firmware/keymaster/keymaster.b00
    symlink /firmware/image/keymaster.b01 /vendor/firmware/keymaster/keymaster.b01
    symlink /firmware/image/keymaster.b02 /vendor/firmware/keymaster/keymaster.b02
    symlink /firmware/image/keymaster.b03 /vendor/firmware/keymaster/keymaster.b03
    symlink /firmware/image/keymaster.mdt /vendor/firmware/keymaster/keymaster.mdt
    chmod 0660 /dev/qseecom
    chown system drmrpc /dev/qseecom
    chmod 0664 /dev/ion
    chown system system /dev/ion

# Separate copy needed to use /sbin/linker instead of /system/bin/linker
service sbinqseecomd /sbin/qseecomd
    oneshot
    disabled
    user root
    group root
    seclabel u:r:recovery:s0

service qseecomd /sbin/qseecomd
    oneshot
    disabled
    user root
    group root
    seclabel u:r:recovery:s0

on property:ro.crypto.state=encrypted
    start qseecomd

# used only for bringing up decrypt and keeping it around for future ref
service logd /system/bin/logd
    disabled
    class core
    socket logd stream 0666 logd logd
    socket logdr seqpacket 0666 logd logd
    socket logdw dgram 0222 logd logd
    group root system

on late-init
    # Remove a file to wake up anything waiting for firmware.
    trigger firmware_mounts_complete

    trigger boot
